substitutions:
  device_name: lgtherma

esphome:
  name: "${device_name}"
  on_boot:
    priority: 200
    then:
      lambda: !lambda |-
          //Set initial states

esp32:
  board: nodemcu-32s
#  framework:
#    type: arduino
#    version: 1.0.6
#    source: file:///home/daniel/LG/myplatform/arduino-esp32-1.0.6

# Enable logging
logger:
  logs:
    modbus_controller.sensor: WARN
    modbus.number: WARN
    number: WARN
    modbus_controller.output: WARN
    esp32.preferences: WARN
    sensor: WARN
#  level: INFO
#  level: VERBOSE

# Enable Home Assistant API
api:
  password: ""

ota:
  password: ""

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  domain: ".home.lan"
  power_save_mode: None

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Lgtherma Fallback Hotspot"
    password: ""

captive_portal:

#external_components:
#  - source: my_components

packages:
  powermeter: !include Powermeter.yaml
  heatpump: !include LGheatpump.yaml

globals:
  - id: stooklijn_target
    type: float
    restore_value: no
    initial_value: '27'
  - id: thermostat_timer
    type: int
    restore_value: no
    initial_value: "0"

script:
  - id: update_stooklijn_target
    then: 
      lambda: !lambda |-
        float oat = id(buiten_temp).state;
        //Heating
        //Formula is wTemp = -Z x (OAT-stooklijn_start_temp) + stooklijn_min_wtemp
        //Formula to calculate -Z = ((stooklijn_max_wtemp-stooklijn_min_wtemp)) / (stooklijn_min_oat - stooklijn_start_temp))
        const float minZ = ((float)id(stooklijn_max_wtemp).state-(float)id(stooklijn_min_wtemp).state)/( (float)id(stooklijn_min_oat).state - (float)id(stooklijn_start_temp).state);
        ESP_LOGD("stooklijn", "Stooklijn, working mode is heating, with oat: %f, minZ: %f",oat, minZ);

        oat = clamp(oat, id(stooklijn_min_oat).state, id(stooklijn_start_temp).state);

        id(stooklijn_target) = round(((minZ * (oat-id(stooklijn_start_temp).state))+id(stooklijn_min_wtemp).state)*10)/10.0;

        //Add stooklijn offset
        id(stooklijn_target) = id(stooklijn_target) + id(wp_stooklijn_offset).state;

        //Make sure target is not above max water or below minimum temp
        id(stooklijn_target) = clamp(id(stooklijn_target), id(stooklijn_min_wtemp).state, id(stooklijn_max_wtemp).state);

        ESP_LOGD("stooklijn", "New stooklijn target value (after correction): %f", id(stooklijn_target));
        //Publish new stooklijn value to watertemp value sensor
        //id(watertemp_target).publish_state(id(stooklijn_target));
  - id: thermostaat
    mode: restart
    then: 
      - delay: 1s
      - lambda: !lambda |-
          static bool switched = false;
          ESP_LOGD("Thermostaat", "T: %f, %f, ref: %f", id(huiskamer_lucht).state, (id(huiskamer_lucht).state-id(huiskamer_thermostaat_target).state), id(thermostat_wp_heat).state?0.5:0.0);
          ESP_LOGD("Thermostaat", "switched: %s, timer: %d", switched?"True":"False", id(thermostat_timer));

          if ((id(huiskamer_lucht).state-id(huiskamer_thermostaat_target).state) <= (id(thermostat_wp_heat).state?0.5:0.0)) {
            ESP_LOGD("Thermostaat", "Thermostaat aan");
            if (!(id(thermostat_wp_heat).state)) {
              if (!switched) {
                switched = true;
                id(thermostat_timer) = 15; // minimum time thermostat heat ask before heat ask turned on?
              }
              if (id(thermostat_timer)==0) {
                id(thermostat_wp_heat).turn_on();
              }
            } else switched = false;
          } else {
            ESP_LOGD("Thermostaat", "Thermostaat uit");
            if ((id(thermostat_wp_heat).state)) {
              if (!switched) {
                switched = true;
                id(thermostat_timer) = 15; // minimum time thermostat stop-heat ask before heat ask turned on?
              }

              if (id(thermostat_timer)==0) {
                id(thermostat_wp_heat).turn_off();
              }
            } else switched = false;
          }

text_sensor:
  - platform: template
    name: "LG Controller state"
    id: lg_controller_state
    update_interval: never

number:
  - platform: template
    name: "Stooklijn offset"
    id: wp_stooklijn_offset
    min_value: -5
    max_value: 5
    initial_value: 0
    step: 1
    restore_value: yes
    unit_of_measurement: "°C"
    optimistic: true
    set_action:
      then:
        - script.execute: update_stooklijn_target
  - platform: template
    name: "Thermostaat target"
    id: huiskamer_thermostaat_target
    min_value: 10
    max_value: 25
    initial_value: 19
    step: 1
    restore_value: yes
    unit_of_measurement: "°C"
    optimistic: true
    set_action:
      then:
        script.execute: thermostaat
  - platform: template
    name: "Thermostat error gain"
    id: thermostat_error_gain
    min_value: 0
    max_value: 20
    initial_value: 10
    step: 1
    restore_value: yes
    unit_of_measurement: "°C/°C"
    optimistic: true
  - platform: template
    id: stooklijn_min_oat
    name: "Stooklijn Minimum Buitentemperatuur"
    min_value: -25
    max_value: 0
    step: 1
    restore_value: yes
    initial_value: -15
    unit_of_measurement: "°C"
    optimistic: true
    set_action:
      then:
        - script.execute: update_stooklijn_target
  - platform: template
    id: stooklijn_max_wtemp
    name: "Stooklijn Maximum Watertemperatuur"
    min_value: 20
    max_value: 60
    step: 1
    restore_value: yes
    initial_value: 35
    unit_of_measurement: "°C"
    optimistic: true
    set_action:
      then:
        - script.execute: update_stooklijn_target
  - platform: template
    id: stooklijn_min_wtemp
    name: "Stooklijn Minimum Watertemperatuur"
    min_value: 20
    max_value: 35
    step: 1
    restore_value: yes
    initial_value: 22
    unit_of_measurement: "°C"
    optimistic: true
    set_action:
      then:
        - script.execute: update_stooklijn_target
  - platform: template
    id: stooklijn_start_temp
    name: "Stooklijn Start Buitentemperatuur"
    min_value: 0
    max_value: 20
    step: 1
    restore_value: yes
    initial_value: 15
    unit_of_measurement: "°C"
    optimistic: true
    set_action:
      then:
        - script.execute: update_stooklijn_target
  - platform: template
    id: minimum_run_time
    name: "Minimale run tijd"
    min_value: 0
    max_value: 120
    step: 1
    restore_value: yes
    initial_value: 30
    unit_of_measurement: "min"
    optimistic: true
  - platform: template
    id: minimum_off_time
    name: "Minimale after-run tijd"
    min_value: 0
    max_value: 30
    step: 1
    restore_value: yes
    initial_value: 15
    unit_of_measurement: "min"
    optimistic: true
#  - platform: template
#    id: thermostat_off_delay
#    name: "thermostat off delay"
#    min_value: 0
#    max_value: 10
#    step: 1
#    restore_value: yes
#    initial_value: 1
#    unit_of_measurement: "min"
#    optimistic: true

switch:
  - platform: restart
    name: "LG Therma ESPHome Restart"
  - platform: template
    name: "WP Heat"
    id: thermostat_wp_heat
    restore_state: yes
    optimistic: true


interval:
  - interval: 20s
    id: state_machine
    then: !include { file: state_machine.c }
  - interval: 60s
    then:
      - lambda: |-
          if (id(thermostat_timer)>0) {
            id(thermostat_timer)--;
            id(thermostaat).execute();
          }  

    
sensor:

  - platform: homeassistant
    name: "Huiskamer lucht"
    id: huiskamer_lucht
    entity_id: sensor.huiskamer_lucht
    on_value:
      then: 
        script.execute: thermostaat
  - platform: homeassistant
    name: "Huiskamer vloer"
    id: huiskamer_vloer
    entity_id: sensor.huiskamer_vloer

  - platform: template
    name: "Stooklijn Watertemp Target"
    id: watertemp_target
    unit_of_measurement: "°C"
    update_interval: 60s
    #lambda: |-
    #    //return id(stooklijn_target);

  - platform: template
    name: "Thermostat error"
    id: thermostat_error
    unit_of_measurement: "°C"
    update_interval: 5s
    lambda: |-
        return (id(huiskamer_thermostaat_target).state - id(huiskamer_lucht).state); // e = ref - measured
    filters:
      - sliding_window_moving_average:
          window_size: 120
          send_every: 1

  - platform: template
    name: "Temp20 filtered"
    id: temp20_filtered
    unit_of_measurement: "°C"
    update_interval: 20s
    lambda: |-
        return (id(temp20).state);
    filters:
      - sliding_window_moving_average:
          window_size: 30
          send_every: 1
  - platform: template
    name: "Temp18 filtered"
    id: temp18_filtered
    unit_of_measurement: "°C"
    update_interval: 20s
    lambda: |-
        return (id(temp18).state);
    filters:
      - sliding_window_moving_average:
          window_size: 30
          send_every: 1


  - platform: wifi_signal
    name: "${device_name} WiFi Signal"
    update_interval: 120s
    accuracy_decimals: 0
  - platform: uptime
    name: "${device_name} Uptime"
    unit_of_measurement: days
    update_interval: 3600s
    accuracy_decimals: 1
    filters:
      - multiply: 0.000011574

